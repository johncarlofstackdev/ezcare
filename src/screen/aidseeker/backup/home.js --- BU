import React, { useEffect, useState, useCallback } from "react"
import FontAwesome from "react-native-vector-icons/FontAwesome5"
import { View, StyleSheet, Dimensions, Animated, ActivityIndicator } from 'react-native';
import {
  Box, Text, Heading, VStack, FormControl, Input, Link, Button, HStack, Center, NativeBaseProvider,
  Pressable, Icon, Avatar, Spinner, Container, Circle
} from "native-base"

import { ref, set, update, onValue, remove } from "firebase/database"
import { auth, db, storage } from "../../../config"

// import Geolocation from '@react-native-community/geolocation'
import Geolocation from 'react-native-geolocation-service'

import Loader from 'react-native-spinkit'

const getFileUrl = async (fileRef) => {
  try {
    const url = await storage.ref().child(fileRef).getDownloadURL();
    return url;
  } catch (err) {
    console.log('Error getting download URL: ', err);
  }
}

const fetchAddress = async (latitude, longitude) => {
  const endpoint = `https://maps.googleapis.com/maps/api/geocode/json?latlng`
  const API_KEY = 'AIzaSyBg9J9ixxZ9Y6Gawijfw52i_EM801DHgts'
  try {
    const response = await fetch(`${endpoint}=${latitude},${longitude}&key=${API_KEY}`)
    const data = await response.json()
    return data.results[0].formatted_address
  } catch (e) {
    console.log(e)
  }
}

const traking_code = (length) => {
  let result = '';
  const characters = '0123456789';
  const charactersLength = characters.length;
  let counter = 0;
  while (counter < length) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
    counter += 1;
  }
  return result;
}

const Home = ({ navigation }) => {
  const [userData, setUserData] = useState({})
  const [checkData, setCheckData] = useState(true)

  const [profile, profileSet] = useState('')

  const [longitude, longitudeSet] = useState('')
  const [latitude, latitudeSet] = useState('')
  const [address, addressSet] = useState('')

  const [checkPress, checkPressSet] = useState(false);

  const [userUID, userUIDset] = useState()

  Geolocation.setRNConfiguration(
    {
      config: {
        skipPermissionRequests: true,
        authorizationLevel: 'auto',
        locationProvider: 'auto',
      }
    })

  const optionsGeo = {
    enableHighAccuracy: true, timeout: 30000, maximumAge: 1000
  }

  useEffect(() => {
    const successHandler = (position) => {
      latitudeSet(position.coords.latitude)
      longitudeSet(position.coords.longitude)
      fetchAddress(position.coords.latitude, position.coords.longitude).then(response => addressSet(response))
    };

    const errorHandler = (error) => {
      console.error(error);
    };

    Geolocation.getCurrentPosition(successHandler, errorHandler, optionsGeo);
    // Geolocation.getCurrentPosition((position) => {
    //   latitudeSet(position.coords.latitude)
    //   longitudeSet(position.coords.longitude)
    //   addressSet('Test lang sani kay basin ma GG ang API AHAHAH, Dili rabani akoa ahahaahah')
    //   // fetchAddress(position.coords.latitude, position.coords.longitude).then(response => addressSet(response))
    // }, optionsGeo)
  }, [])

  const getMilitaryTime = () => {
    const date = new Date();
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
  }

  const handlePressIn = () => {
    checkPressSet(true)
    const currentDate = new Date().toLocaleDateString(); // Get current date (e.g. "5/28/2021")
    const currentTime = getMilitaryTime(); // Get current time (e.g. "3:15:27 PM")
    const data = {
      incedent_code: traking_code(6),
      aid_seeker_id: userUID,
      date_requested: currentDate + ' ' + currentTime,
      date_close: "",
      aid_provider_id: "",
      bothLocations: {
        aid_provider: "",
        aid_seeker: "",
      },
      location: {
        longitude: longitude,
        latitude: latitude,
      },
      Ambulance_Request: false,
      status: 1 // waiting response status
    }
    set(ref(db, `incedent/${traking_code(15)}/`), data)
  };

  // const handlePressOut = () => {
  //   const duration = new Date().getTime() - pressTime;
  //   console.log(`Pressed for ${msToSeconds(duration)} milliseconds`);
  // };

  // Handle user state changes
  const onAuthStateChanged = (user) => {
    if (user) {

      // check if already helped someone that are not yet end : START
      const refHelped = 'incedent/'
      const rootRefHelped = db.ref(refHelped)
      const queryRefHelped = rootRefHelped.orderByChild('status').equalTo(2);
      queryRefHelped.on('value', snap => {
        if (snap.exists()) {
          const refHelped2 = 'incedent/'
          const rootRefHelped2 = db.ref(refHelped2)
          const queryRefHelped2 = rootRefHelped2.orderByChild('aid_seeker_id').equalTo(user.uid);
          queryRefHelped2.on('value', snap => {
            if (snap.exists()) {
              navigation.navigate('Event', { event_id: Object.keys(snap.val())[0] })
            }
          })
        }
      })
      // check if already helped someone that are not yet end : END

      const queryRefHelpedCheck = rootRefHelped.orderByChild('status').equalTo(1);
      queryRefHelpedCheck.on('value', snap => {
        if (snap.exists()) {
          const key = Object.keys(snap.val())
          if (snap.val()[key[0]].status === 1) {
            checkPressSet(true)
          }
        }
      })

      userUIDset(user.uid)
      const ref = 'aid_seeker/' + user.uid + '/'
      const rootRef = db.ref(ref)
      rootRef.on('value', snap => {
        const userDataInfo = snap.val()
        setUserData(userDataInfo)
        if (userDataInfo.profile) {

        } else {
          getFileUrl('profile/index.jpg').then(urlPath => {
            profileSet(urlPath)
            setCheckData(false)
          })
        }
      })
    }
  }

  useEffect(() => {
    const subscriber = auth.onAuthStateChanged(onAuthStateChanged)
    return subscriber
  }, [address])

  // const viewProfileHTML = useCallback(() => {
  //   // fetchAddress(latitude__, longitude__).then(response => console.log(response))
  // }, [position])

  if (checkData || address === "") {
    return (
      <NativeBaseProvider>
        <Center flex={1} px="3" bg="muted.50">
          <Center w="100%">
            <HStack space={2} justifyContent="center">
              <Loader isVisible={true} size={Dimensions.get("window").width - 360} type='ThreeBounce' color='#db2777' />
            </HStack>
          </Center>
        </Center>
      </NativeBaseProvider >
    )
  }

  return (
    <NativeBaseProvider>
      <View style={{ backgroundColor: '#fefefe', padding: 20, paddingLeft: 30, paddingRight: 30, paddingTop: 40 }}>
        <Box bg="white" shadow={2} p="3" rounded="xl">
          <HStack space={2}>
            <Avatar
              bg="white"
              size="lg"
              source={{
                uri: profile
              }}
              style={{ borderWidth: 4, borderColor: '#be185d', padding: 3 }}
            >
              {userData.fullname}
            </Avatar>
            <Box>
              <Heading
                mt="1"
                ml="3"
                fontWeight="900"
                fontSize={25}
              >
                {userData.fullname}
              </Heading>
              <Heading
                ml="3"
                fontWeight="medium"
                size="sm"
                color="coolGray.600"
              >
                {userData.email}
              </Heading>
            </Box>
          </HStack>
        </Box>
        <Box mt="4" pt="5">
          <Heading
            fontWeight="600"
            fontSize={35}
          >
            Need immediate help?
          </Heading>
          <Text
            style={{ fontSize: 21 }}
            color="coolGray.600"
            _dark={{
              color: "warmGray.200"
            }}
            mt="2"
          >
            Press and hold the button to release distress signal.
          </Text>
        </Box>
        <Center h={Dimensions.get("window").height - 415} alignItems="center">
          <Pressable
            w={Dimensions.get("window").width - 160}
            onLongPress={handlePressIn}
            delayLongPress={2000}
            disabled={checkPress}
            h={Dimensions.get("window").width - 160}
          >
            {({
              isHovered,
              isFocused,
              isPressed
            }) => {
              return < View style={{
                width: '100%',
                height: '100%',
                maxHeight: Dimensions.get("window").width - 160,
                maxWidth: Dimensions.get("window").width - 160,
                backgroundColor: 'white',
                borderRadius: 200,
                justifyContent: 'center',
                alignItems: 'center',
                borderWidth: 3,
                borderColor: checkPress ? '#c4417b' : (isPressed ? '#db2777' : '#be185d'),
                transform: [{
                  scale: checkPress ? 0.93 : (isPressed ? 0.93 : 1)
                }]
              }}>
                <View style={{
                  width: Dimensions.get("window").width - 190,
                  height: Dimensions.get("window").width - 190,
                  backgroundColor: checkPress ? '#c4417b' : (isPressed ? '#c4417b' : '#be185d'),
                  borderRadius: 250,
                  justifyContent: 'center',
                  alignItems: 'center'
                }}>
                  {checkPress ? (
                    <Loader isVisible={true} size={Dimensions.get("window").width - 250} type='Pulse' color='#db2777' />
                  ) :
                    (<FontAwesome name="hands-helping" size={100} color="white" />)
                  }
                </View>
              </View>
            }}
          </Pressable>
        </Center>
        <Box bg="warmGray.100" rounded="xl" p="2" shadow={2}>
          <HStack space={5} h="70" alignItems="center">
            <Box justifyContent="center" ml="2">
              <FontAwesome name="map-marker-alt" size={30} color="#000000" />
            </Box>
            <Container>
              <Heading
                fontWeight="600"
                fontSize={15}
                color="#be185d"
              >
                CURRENT LOCATION
              </Heading>
              <Text style={{ fontSize: 20 }} mt="1" numberOfLines={2}>
                {address}
              </Text>
            </Container>
          </HStack>
        </Box>
      </View>
    </NativeBaseProvider >
  );
}

export default Home;
